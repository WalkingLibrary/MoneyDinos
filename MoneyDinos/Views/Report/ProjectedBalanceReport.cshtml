@model MoneyDinos.Models.ProjectedBalanceViewModel

<h2>Projected Balance Report</h2>

@{
    var currentDate = DateTime.Now.ToString("yyyy-MM-dd"); // Format the current date for the input
}

<form asp-action="ProjectedBalanceReport" method="post">
    <div class="form-group">
        <label asp-for="StartDate">Start Date</label>
        <input asp-for="StartDate" class="form-control" type="date" value="@currentDate" />
    </div>

    <div class="form-group">
        <label asp-for="EndDate">End Date</label>
        <input asp-for="EndDate" class="form-control" type="date" value="@currentDate" />
    </div>

    <button type="submit" class="btn btn-primary">Generate Report</button>
</form>

@if (Model.ProjectedBalances != null && Model.ProjectedBalances.Any())
{
    <h3>Projected Balances from @Model.StartDate.ToString("yyyy-MM-dd") to @Model.EndDate.ToString("yyyy-MM-dd")</h3>

    <div class="calendar-view">
        @{
            decimal? previousBalance = null;
            int? currentMonth = null;

            @foreach (var balance in Model.ProjectedBalances.Select(b => b.Date.Month).Distinct())
            {
                <div class="calendar-row">
                    @foreach (var dayBalance in Model.ProjectedBalances.Where(b => b.Date.Month == balance))
                    {
                        var colorClass = GetColorClass(previousBalance, dayBalance.Amount);

                        <div class="calendar-cell @colorClass">
                            <div class="date">@dayBalance.Date.ToString("MM-dd")</div>
                            <div class="amount">@dayBalance.Amount.ToString("C")</div>
                        </div>

                        previousBalance = dayBalance.Amount;
                    }
                </div>
            }
        }
    </div>
}

@functions {
    private string GetColorClass(decimal? previousBalance, decimal currentBalance)
    {
        if (previousBalance.HasValue)
        {
            if (currentBalance > previousBalance.Value)
            {
                return "balance-up";
            }
            else if (currentBalance < previousBalance.Value)
            {
                return "balance-down";
            }
        }
        return "balance-no-change";
    }
}

<style>
    .calendar-view {
        display: flex;
        flex-wrap: wrap;
    }

    .calendar-row {
        display: flex;
        width: 100%;
        flex-wrap: wrap;
        margin: 10px;
        font-size: 2vw;
    }

    .calendar-cell {
        width: 14.28%; /* To create 7 columns for a week */
        border: 1px solid #ddd;
        padding: 10px;
        box-sizing: border-box;
        text-align: center;
    }

    .balance-up {
        background-color: #d4edda; /* Light green */
        color: #155724; /* Dark green */
    }

    .balance-down {
        background-color: #f8d7da; /* Light red */
        color: #721c24; /* Dark red */
    }

    .balance-no-change {
        background-color: #f1f1f1; /* Light gray */
        color: #333; /* Dark gray */
    }
</style>
