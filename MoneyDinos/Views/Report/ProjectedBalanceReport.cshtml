@model MoneyDinos.Models.ProjectedBalanceViewModel

<h2>Projected Balance Report</h2>

@{
    var currentDate = DateTime.Now.ToString("yyyy-MM-dd"); // Format the current date for the input
}

<form asp-action="ProjectedBalanceReport" method="post">
    <div class="form-group">
        <label asp-for="StartDate">Start Date</label>
        <input asp-for="StartDate" class="form-control" type="date" value="@currentDate" />
    </div>

    <div class="form-group">
        <label asp-for="EndDate">End Date</label>
        <input asp-for="EndDate" class="form-control" type="date" value="@currentDate" />
    </div>

    <button type="submit" class="btn btn-primary">Generate Report</button>
</form>

@if (Model.ProjectedBalances != null && Model.ProjectedBalances.Any())
{
    <h3>Projected Balances from @Model.StartDate.ToString("yyyy-MM-dd") to @Model.EndDate.ToString("yyyy-MM-dd")</h3>

    <div class="calendar-view">
        @{
            decimal? previousBalance = null;
            int? currentMonth = null;

            @foreach (var balance in Model.ProjectedBalances.Select(b => b.Date.Month).Distinct())
            {
                <div class="calendar-row">
                    @foreach (var dayBalance in Model.ProjectedBalances.Where(b => b.Date.Month == balance))
                    {
                        var colorClass = GetColorClass(previousBalance, dayBalance.Amount);
                        var incomes = dayBalance.IncomesUsedToCalculate.ToList();
                        var expenses = dayBalance.ExpensesUsedToCalculate.ToList();

                        <div class="calendar-cell @colorClass">
                            <div class="date">@dayBalance.Date.ToString("MM-dd")</div>
                            <div class="amount">@dayBalance.Amount.ToString("C")</div>
                            @if (incomes.Any() || expenses.Any())
                                                {
                                                    <button class="toggle-breakdown" onclick="toggleBreakdown(this)">
                                                          <svg class="down-arrow" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                                                    <path fill-rule="evenodd" d="M1.5 3.5a.5.5 0 0 1 .5-.5h12a.5.5 0 0 1 .354.854l-6 6a.5.5 0 0 1-.708 0l-6-6A.5.5 0 0 1 1.5 3.5z"/>
                                                                </svg>
                                                                <svg class="up-arrow" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="display: none;">
                                                                    <path fill-rule="evenodd" d="M14.5 12.5a.5.5 0 0 1-.5.5h-12a.5.5 0 0 1-.354-.854l6-6a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 .146.354z"/>
                                                                </svg>
                                                    </button>
                                                    <div class="breakdown" style="display: none;">
                                                        @if (incomes.Any())
                                                        {
                                                            <div class="income-breakdown">
                                                                <strong>Incomes:</strong>
                                                                <ul>
                                                                    @foreach (var income in incomes)
                                                                    {
                                                                        <li>
                                                                            @income.Description: @income.Amount.ToString("C")
                                                                            <!-- Add button for Exact Entry creation for Income -->
                                                                            <a href="@Url.Action("ExactEntryCreate", "ExactEntry", new { TransactionId = income.Id, IsExpense = false, date = income.Date, amount = income.Amount })" class="btn btn-warning reportEntryButton">Add Exact Entry</a>
                                                                        </li>
                                                                    }
                                                                </ul>
                                                            </div>
                                                        }

                                                        @if (expenses.Any())
                                                        {
                                                            <div class="expense-breakdown">
                                                                <strong>Expenses:</strong>
                                                                <ul>
                                                                    @foreach (var expense in expenses)
                                                                    {
                                                                        <li>@expense.Description: @expense.Amount.ToString("C")
                                                                            <!-- Add button for Exact Entry creation for Expense -->
                                                                            <a href="@Url.Action("ExactEntryCreate", "ExactEntry", new { TransactionId = expense.Id, IsExpense = true, date = expense.Date, amount = expense.Amount })" class="btn btn-warning reportEntryButton">Add Exact Entry</a>
                                                                        </li>
                                                                    }
                                                                </ul>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                        </div>

                        previousBalance = dayBalance.Amount;
                    }
                </div>
            }
        }
    </div>
}

@functions {
    private string GetColorClass(decimal? previousBalance, decimal currentBalance)
    {
        if (previousBalance.HasValue)
        {
            if (currentBalance > previousBalance.Value)
            {
                return "balance-up";
            }
            else if (currentBalance < previousBalance.Value)
            {
                return "balance-down";
            }
        }
        return "balance-no-change";
    }
}

<style>
    .calendar-view {
        display: flex;
        flex-wrap: wrap;
    }

    .calendar-row {
        display: flex;
        width: 100%;
        flex-wrap: wrap;
        margin: 10px;
        font-size: 2vw;
    }

    .calendar-cell {
        width: 14.28%; /* To create 7 columns for a week */
        border: 1px solid #ddd;
        padding: 10px;
        box-sizing: border-box;
        text-align: center;
    }

    .balance-up {
        background-color: #d4edda; /* Light green */
        color: #155724; /* Dark green */
    }

    .balance-down {
        background-color: #f8d7da; /* Light red */
        color: #721c24; /* Dark red */
    }

    .balance-no-change {
        background-color: #f1f1f1; /* Light gray */
        color: #333; /* Dark gray */
    }
</style>
